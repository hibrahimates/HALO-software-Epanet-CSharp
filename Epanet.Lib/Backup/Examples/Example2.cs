// 
// Epanet -- Epanet2 Toolkit hydraulics library C# Interface
//                                                                    
// Example2.cs -- Example #2 from "The EPANET Programmer's Toolkit" help.
// 
// CREATED:    02/13/2014                                                                    
// VERSION:    2.00                                               
// DATE:         02/13/2014
//             
// AUTHOR:     slava           
// 
// This is free and unencumbered software released into the public domain.
// 
// Anyone is free to copy, modify, publish, use, compile, sell, or
// distribute this software, either in source code form or as a compiled
// binary, for any purpose, commercial or non-commercial, and by any
// means.
// 
// In jurisdictions that recognize copyright laws, the author or authors
// of this software dedicate any and all copyright interest in the
// software to the public domain. We make this dedication for the benefit
// of the public at large and to the detriment of our heirs and
// successors. We intend this dedication to be an overt act of
// relinquishment in perpetuity of all present and future rights to this
// software under copyright law.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
// 
// For more information, please refer to <http://unlicense.org/>

namespace Epanet.Examples {

    /// <summary>Example #2 from "The EPANET Programmer's Toolkit" help.</summary>
    public static class Example2 {
        /// <summary>
        ///     This example illustrates how the Toolkit could be used to develop
        ///     a hydrant rating curve used in fire flow studies. This curve shows
        ///     the amount of flow available at a node in the system as a function
        ///     of pressure. The curve is generated by running a number of steady
        ///     state hydraulic analyses with the node of interest subjected to a
        ///     different demand in each analysis. For this example we assume that
        ///     the ID label of the node of interest is <paramref name="MyNode" />
        ///     and that <paramref name="N" /> different demand levels stored in
        ///     the array <paramref name="D" /> need to be examined. The
        ///     corresponding pressures will be stored in <paramref name="P" />.
        ///     To keep the code more readable, no error checking is made on the
        ///     results returned from the Toolkit function calls.
        /// </summary>
        public static void HydrantRating(string MyNode, int N, float[] D, float[] P) {
            int i, nodeindex;
            int t;
            float pressure;

            /* Open the EPANET toolkit & hydraulics solver */
            UnsafeNativeMethods.ENopen("example2.inp", "example2.rpt", "");
            UnsafeNativeMethods.ENopenH();

            /* Get the index of the node of interest */
            UnsafeNativeMethods.ENgetnodeindex(MyNode, out nodeindex);

            /* Iterate over all demands */
            for (i = 1; i < N; i++) {
                /* Set nodal demand, initialize hydraulics, make a */
                /* single period run, and retrieve pressure */
                UnsafeNativeMethods.ENsetnodevalue(nodeindex, NodeValue.BaseDemand, D[i]);
                UnsafeNativeMethods.ENinitH(0);
                UnsafeNativeMethods.ENrunH(out t);
                UnsafeNativeMethods.ENgetnodevalue(nodeindex, NodeValue.Pressure, out pressure);
                P[i] = pressure;
            }

            /* Close hydraulics solver & toolkit */
            UnsafeNativeMethods.ENcloseH();
            UnsafeNativeMethods.ENclose();
        }
    }

}

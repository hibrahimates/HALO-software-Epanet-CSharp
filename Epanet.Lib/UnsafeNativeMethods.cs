// 
// Epanet -- Epanet2 Toolkit hydraulics library C# Interface
//                                                                    
// UnsafeNativeMethods.cs -- epanet2.dll import declarations
// 
// CREATED:    02/13/2014                                                                    
// VERSION:    2.00                                               
// DATE:         02/13/2014
//             
// AUTHOR:     slava           
// 
// This is free and unencumbered software released into the public domain.
// 
// Anyone is free to copy, modify, publish, use, compile, sell, or
// distribute this software, either in source code form or as a compiled
// binary, for any purpose, commercial or non-commercial, and by any
// means.
// 
// In jurisdictions that recognize copyright laws, the author or authors
// of this software dedicate any and all copyright interest in the
// software to the public domain. We make this dedication for the benefit
// of the public at large and to the detriment of our heirs and
// successors. We intend this dedication to be an overt act of
// relinquishment in perpetuity of all present and future rights to this
// software under copyright law.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
// 
// For more information, please refer to <http://unlicense.org/>

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace Epanet
{

    /// <summary>
    ///     Declarations of functions in the EPANET PROGRAMMERs TOOLKIT(EPANET2.DLL).
    ///     These are the external functions that comprise the DLL.
    /// </summary>
    [System.Security.SuppressUnmanagedCodeSecurity]
    internal static class UnsafeNativeMethods
    {
        /// <summary>Delegate for <see cref="ENepanet" /> progress callback.</summary>
        /// <param name="message">Status message passed from epanet dll.</param>
        [UnmanagedFunctionPointer(CONVENTION)]
        public delegate void ViewProgCallback([MarshalAs(STRING)] string message);

        internal static void ENgetlinkindex(int i, out object index)
        {
            throw new NotImplementedException();
        }

        internal static void ENgetlinkid(int i, LinkType pipe, out string id)
        {
            throw new NotImplementedException();
        }

        #region Functions for opening & closing the EPANET system

        /// <summary>Runs a complete EPANET simulation.</summary>
        /// <param name="f1">Name of input file.</param>
        /// <param name="f2">Name of report file.</param>
        /// <param name="f3">Name of binary output file.</param>
        /// <param name="pviewprog">
        ///     Pointer to a user-supplied function (<see cref="ViewProgCallback" />) which accepts
        ///     a character string as its argument; see note below.
        /// </param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         The <paramref name="pviewprog" /> argument is a pointer to a callback
        ///         function that takes a character string (char *) as its only parameter.
        ///         The function would reside in and be used by the calling
        ///         program to display the progress messages that EPANET generates
        ///         as it carries out its computations. If this feature is not
        ///         needed then the argument should be <c>null</c>.
        ///     </para>
        ///     <para>
        ///         ENepanet is a stand-alone function and does not interact with
        ///         any of the other functions in the toolkit.
        ///     </para>
        ///     <para>
        ///         If there is no need to save EPANET's binary output file
        ///         then <paramref name="f3" /> can be an empty string ("").
        ///     </para>
        ///     <para>
        ///         The vfunc function pointer allows the calling program
        ///         to display a progress message generated by EPANET during its
        ///         computations.
        ///     </para>
        ///     <example>
        ///         A typical function for a console application might look as follows:
        ///         <code>
        ///     static void  WriteConsole(string s)  {  
        ///         System.Console.WriteLine(s);  
        ///     }  
        /// </code>
        ///         and somewhere in the calling program the following declarations would appear:
        ///         <code>
        ///     Pviewprog vfunc = WriteConsole;
        ///     ENepanet(f1, f2, f3, vfunc);
        /// </code>
        ///         If such a function is not desired then this argument should be null.
        ///     </example>
        ///     <para>
        ///         <see cref="ENepanet" /> is used mainly to link the EPANET engine to third-party
        ///         user interfaces that build network input files and display the results of a
        ///         network analysis.
        ///     </para>
        /// </remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, CharSet = CHARSET,
            BestFitMapping = false, ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENepanet(
            [MarshalAs(STRING)] string f1,
            [MarshalAs(STRING)] string f2,
            [MarshalAs(STRING), Optional, DefaultParameterValue("")] string f3,
            [Optional, DefaultParameterValue(null)] ViewProgCallback pviewprog);

        /// <summary>Opens EPANET input file and reads in network data.</summary>
        /// <param name="f1">Name of an EPANET Input file.</param>
        /// <param name="f2">Name of an output Report file.</param>
        /// <param name="f3">Name of an optional binary Output file.</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     If there is no need to save EPANET's binary Output file
        ///     then <paramref name="f3" /> can be an empty string ("").
        ///     <see cref="ENopen" /> must be called before any of the other
        ///     toolkit functions (except <see cref="ENepanet" />) are used.
        /// </remarks>
        /// <seealso cref="ENclose" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, CharSet = CHARSET,
            BestFitMapping = false, ThrowOnUnmappableChar = true), PreserveSig]
        public static extern ErrorCode ENopen(
            [MarshalAs(STRING)] string f1,
            [MarshalAs(STRING)] string f2,
            [MarshalAs(STRING), Optional, DefaultParameterValue("")] string f3);

        /// <summary>Writes all current network input data to a file using the format of an EPANET input file.</summary>
        /// <param name="filename">Name of INP file where data is saved.</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     The data saved reflect any changes made by calls to
        ///     the <c>ENsetxxx</c> family of functions since EPANET
        ///     data was first loaded using <see cref="ENopen" />.
        /// </remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, CharSet = CHARSET,
            BestFitMapping = false, ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENsaveinpfile([MarshalAs(STRING)] string filename);

        /// <summary>Frees all memory and files used by EPANET.</summary>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <see cref="ENclose" /> must be called when all processing has been completed,
        ///     even if an error condition was encountered.
        /// </remarks>
        /// <seealso cref="ENopen" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENclose();

        #endregion

        #region Functions for running a hydraulic analysis

        /// <summary>
        ///     Runs a complete hydraulic simulation with results for all time periods
        ///     written to the binary Hydraulics file.
        /// </summary>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     Use <see cref="ENsolveH" /> to generate a complete hydraulic solution
        ///     which can stand alone or be used as input to a water quality analysis.
        ///     It can also be followed by calls to <see cref="ENsaveH" /> and
        ///     <see cref="ENreport" /> to write a report on hydraulic results to the
        ///     report file. Do not use <see cref="ENopenH" />, <see cref="ENinitH" />,
        ///     <see cref="ENrunH" />, <see cref="ENnextH" />, and <see cref="ENcloseH" />
        ///     in conjunction with <see cref="ENsolveH" />.
        /// </remarks>
        /// <example>
        ///     <code>
        ///     ENopen("net1.inp", "net1.rpt", "");
        ///     ENsolveH();
        ///     ENsolveQ();
        ///     ENreport();
        ///     ENclose(); 
        /// </code>
        /// </example>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENsolveH();

        /// <summary>
        ///     Transfers results of a hydraulic simulation from the binary Hydraulics
        ///     file to the binary Output file, where results are only reported at
        ///     uniform reporting intervals.
        /// </summary>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         <see cref="ENsaveH" /> is used when only a hydraulic analysis is run and
        ///         results at uniform reporting intervals need to be transferred to EPANET's
        ///         binary output file. Such would be the case when an output report to
        ///         EPANET's report file will be written using <see cref="ENreport" />.
        ///     </para>
        ///     <para>
        ///         The reporting times can be set either in the EPANET input file (in its [TIMES]
        ///         section) or by using the <see cref="ENsettimeparam" /> function.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENreport" />
        /// <seealso cref="ENsettimeparam" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENsaveH();

        /// <summary>Sets up data structures for hydraulic analysis.</summary>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Call <see cref="ENopenH" /> prior to running the first hydraulic analysis
        ///         using the <see cref="ENinitH" /> - <see cref="ENrunH" /> - <see cref="ENnextH" />
        ///         sequence. Multiple analyses can be made before calling <see cref="ENcloseH" />
        ///         to close the hydraulic analysis system.
        ///     </para>
        ///     <para>
        ///         Do not call this function if <see cref="ENsolveH" /> is being used to run a
        ///         complete hydraulic analysis.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENinitH" />
        /// <seealso cref="ENrunH" />
        /// <seealso cref="ENnextH" />
        /// <seealso cref="ENcloseH" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENopenH();

        /// <summary>Initializes hydraulic analysis.</summary>
        /// <param name="saveflag">
        ///     2-digit flag where 1st (left) digit indicates
        ///     if link flows should be re-initialized (1) or
        ///     not (0) and 2nd digit indicates if hydraulic
        ///     results should be saved to file (1) or not (0).
        /// </param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Call <see cref="ENinitH" /> prior to running a hydraulic analysis
        ///         using <see cref="ENrunH" /> and <see cref="ENnextH" />.
        ///         <see cref="ENopenH" /> must have been called prior to calling <see cref="ENinitH" />.
        ///         Do not call <see cref="ENinitH" /> if a complete hydraulic analysis is being
        ///         made with a call to <see cref="ENsolveH" />.
        ///     </para>
        ///     <para>
        ///         Set <paramref name="saveflag" /> to <see cref="SaveOptions.InitFlow" /> if you
        ///         will be making a subsequent water quality run, using <see cref="ENreport" />
        ///         to generate a report, or using <see cref="ENsavehydfile" /> to save the
        ///         binary hydraulics file.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENopenH" />
        /// <seealso cref="ENrunH" />
        /// <seealso cref="ENnextH" />
        /// <seealso cref="ENcloseH" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENinitH(SaveOptions saveflag);

        /// <summary>Solves hydraulics for conditions at time <paramref name="t" />.</summary>
        /// <param name="t">
        ///     Current simulation time (seconds) (no need to supply a value for <paramref name="t" />).
        /// </param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Use <see cref="ENrunH" /> along with <see cref="ENnextH" /> in
        ///         a <c>do...while</c> loop to analyze hydraulics in each period
        ///         of an extended period simulation. This process automatically
        ///         updates the simulation clock time so treat <paramref name="t" />
        ///         as a read-only variable.
        ///     </para>
        ///     <para>
        ///         <see cref="ENinitH" /> must have been called prior to running
        ///         the <see cref="ENrunH" /> - <see cref="ENnextH" /> loop.
        ///         See <see cref="ENnextH" /> for an example of using this function.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENopenH" />
        /// <seealso cref="ENinitH" />
        /// <seealso cref="ENnextH" />
        /// <seealso cref="ENcloseH" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENrunH(out int t);

        /// <summary>
        ///     Determines the length of time until the next hydraulic event
        ///     occurs in an extended period simulation.
        /// </summary>
        /// <param name="tstep">
        ///     Time (seconds) until next hydraulic event
        ///     (0 marks end of simulation period) (no need to supply a value
        ///     for <c>tstep</c>).
        /// </param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         This function is used in a loop with <see cref="ENrunH" />
        ///         to run an extended period hydraulic simulation.
        ///     </para>
        ///     <para>
        ///         The value of tstep should be treated as a read-only variable.
        ///         It is automatically computed as the smaller of:
        ///         <list type="bullet">
        ///             <item>the time interval until the next hydraulic time step begins;</item>
        ///             <item>the time interval until the next reporting time step begins;</item>
        ///             <item>the time interval until the next change in demands occurs;</item>
        ///             <item>the time interval until a tank becomes full or empty;</item>
        ///             <item>the time interval until a control or rule fires;</item>
        ///         </list>
        ///     </para>
        /// </remarks>
        /// <example>
        ///     <code>
        ///     int t, tstep;
        ///     
        ///     ENopenH();
        ///     ENinitH(0);
        ///     
        ///     do {
        ///         ENrunH(out t);
        ///         /* Retrieve hydraulic results for time t */
        ///         ENnextH(out tstep);
        ///     } while (tstep > 0);
        ///     
        ///     ENcloseH(); 
        /// </code>
        /// </example>
        /// <seealso cref="ENopenH" />
        /// <seealso cref="ENinitH" />
        /// <seealso cref="ENrunH" />
        /// <seealso cref="ENcloseH" />
        /// <seealso cref="ENsettimeparam" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENnextH(out int tstep);

        /// <summary>Closes the hydraulic analysis system, freeing all allocated memory.</summary>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     Call <see cref="ENcloseH" /> after all hydraulics analyses have been made using
        ///     <see cref="ENinitH" /> - <see cref="ENrunH" /> - <see cref="ENnextH" />.
        ///     Do not call this function if <see cref="ENsolveH" /> is being used.
        /// </remarks>
        /// <seealso cref="ENopenH" />
        /// <seealso cref="ENinitH" />
        /// <seealso cref="ENrunH" />
        /// <seealso cref="ENnextH" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENcloseH();

        /// <summary>Saves the current contents of the binary hydraulics file to a file.</summary>
        /// <param name="fileName">Name of the file where the hydraulics results should be saved.</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Use this function to save the current set of hydraulics results to a file,
        ///         either for post-processing or to be used at a later time by calling
        ///         the <see cref="ENusehydfile" /> function.
        ///     </para>
        ///     <para>
        ///         The hydraulics file contains nodal demands and heads and link flows,
        ///         status, and settings for all hydraulic time steps, even intermediate ones.
        ///     </para>
        ///     <para>
        ///         Before calling this function hydraulic results must have been generated and
        ///         saved by having called <see cref="ENsolveH" /> or the <see cref="ENinitH" /> -
        ///         <see cref="ENrunH" /> - <see cref="ENnextH" /> sequence with the saveflag
        ///         parameter of <see cref="ENinitH" /> set to <c>true</c>.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENusehydfile" />
        /// <seealso cref="ENsolveH" />
        /// <seealso cref="ENinitH" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, CharSet = CHARSET,
            BestFitMapping = false, ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENsavehydfile([MarshalAs(STRING)] string fileName);

        /// <summary>Uses the contents of the specified file as the current binary hydraulics file.</summary>
        /// <param name="fileName">Name of file.</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Call this function to refuse a set of hydraulic analysis results saved previously.
        ///         These results are checked to see if they match the following the parameters
        ///         associated with the current network being analyzed: number of nodes, number of
        ///         tanks and reservoirs, number of links, number of pumps, number of valves, and
        ///         simulation duration.
        ///     </para>
        ///     <para>
        ///         Do not call this function when the hydraulics analysis system is still opened
        ///         (i.e., <see cref="ENopenH" /> has been called but <see cref="ENcloseH" /> has not).
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENsavehydfile" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, CharSet = CHARSET,
            BestFitMapping = false, ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENusehydfile([MarshalAs(STRING)] string fileName);

        #endregion

        #region Functions for running a WQ analysis

        /// <summary>
        ///     Runs a complete water quality simulation with results at uniform
        ///     reporting intervals written to EPANET's binary Output file.
        /// </summary>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     A hydraulic analysis must have been run and saved to the binary
        ///     hydraulics file before calling <see cref="ENsolveQ" />.
        ///     It can be followed by a call to <see cref="ENreport" /> to write
        ///     a report on hydraulic and water quality results to the report file.
        ///     Do not use <see cref="ENopenQ" />, <see cref="ENinitQ" />,
        ///     <see cref="ENrunQ" />, <see cref="ENnextQ" />, and <see cref="ENcloseQ" />
        ///     in conjunction with <see cref="ENsolveQ" />.
        /// </remarks>
        /// <example>
        ///     <code>
        ///     ENopen("net1.inp", "net1.rpt", "");  
        ///     ENsolveH();  
        ///     ENsolveQ();  
        ///     ENreport();  
        ///     ENclose();    
        /// </code>
        /// </example>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENsolveQ();

        /// <summary>Sets up data structures for WQ analysis.</summary>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Call <see cref="ENopenQ" /> prior to running the first water quality analysis
        ///         using an <see cref="ENinitQ" /> - <see cref="ENrunQ" /> - <see cref="ENnextQ" />
        ///         (or <see cref="ENstepQ" />) sequence. Multiple water quality analyses can be
        ///         made before calling <see cref="ENcloseQ" /> to close the water quality analysis
        ///         system.
        ///     </para>
        ///     <para>
        ///         Do not call this function if a complete water quality analysis is
        ///         being made using <see cref="ENsolveQ" />.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENinitQ" />
        /// <seealso cref="ENrunQ" />
        /// <seealso cref="ENnextQ" />
        /// <seealso cref="ENstepQ" />
        /// <seealso cref="ENcloseQ" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENopenQ();

        /// <summary>Initializes WQ analysis.</summary>
        /// <param name="saveFlag">
        ///     indicating if analysis results should be saved to EPANET's binary
        ///     output file at uniform reporting periods
        ///     <c>true</c> if results saved to file, <c>false</c> if not.
        /// </param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Call <see cref="ENinitQ" /> prior to running a water quality
        ///         analysis using <see cref="ENrunQ" /> in conjunction with either
        ///         <see cref="ENnextQ" /> or <see cref="ENstepQ" />.
        ///         <see cref="ENopenQ" /> must have been called prior to calling <see cref="ENinitQ" />.
        ///     </para>
        ///     <para>
        ///         Do not call <see cref="ENinitQ" /> if a complete water quality analysis is being
        ///         made with a call to <see cref="ENsolveQ" />.
        ///     </para>
        ///     <para>
        ///         Set saveflag to <c>true</c> if you intend to use <see cref="ENreport" />
        ///         to generate a report or wish to save computed results to the binary output file.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENopenQ" />
        /// <seealso cref="ENrunQ" />
        /// <seealso cref="ENnextQ" />
        /// <seealso cref="ENstepQ" />
        /// <seealso cref="ENcloseQ" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENinitQ(bool saveFlag);

        /// <summary>
        ///     Makes available the hydraulic and water quality results
        ///     that occur at the start of the next time period of a
        ///     water quality analysis, where the start of the period is
        ///     returned in <paramref name="t" />.
        /// </summary>
        /// <param name="t">
        ///     Current simulation time (seconds) (no need to supply a value for <paramref name="t" />).
        /// </param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Use <see cref="ENrunQ" /> along with <see cref="ENnextQ" /> in
        ///         a <c>do...while</c> loop to access water quality results at
        ///         the start of each hydraulic period in an extended period simulation.
        ///         Or use it with <see cref="ENstepQ" /> in a <c>do...while</c> loop
        ///         to access results at the start of each water quality time step.
        ///         See each of these functions for examples of how to code such loops.
        ///     </para>
        ///     <para>
        ///         <see cref="ENinitQ" /> must have been called prior to
        ///         running an <see cref="ENrunQ" /> - <see cref="ENnextQ" />
        ///         (or <see cref="ENstepQ" />) loop.
        ///     </para>
        ///     <para>
        ///         The current time <paramref name="t" /> of the simulation is determined
        ///         from information saved with the hydraulic analysis that preceded the
        ///         water quality analysis. Treat it as a read-only variable.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENopenQ" />
        /// <seealso cref="ENinitQ" />
        /// <seealso cref="ENnextQ" />
        /// <seealso cref="ENstepQ" />
        /// <seealso cref="ENcloseQ" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENrunQ(out int t);

        /// <summary>Advances the water quality simulation to the start of the next hydraulic time period.</summary>
        /// <param name="tstep">
        ///     Time (seconds) until next hydraulic event (0 marks end of simulation period).
        ///     No need to supply a value for <c>tstep</c>).
        /// </param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         This function is used in a do-while loop with <see cref="ENrunQ" />
        ///         to perform an extended period water quality analysis. It allows you to
        ///         access water quality results at each hydraulic period of the simulation.
        ///         The water quality routing and reactions are carried out internally at a
        ///         much smaller time step. Use <see cref="ENstepQ" /> instead of this function
        ///         if you need to access results after each water quality time step.
        ///     </para>
        ///     <para>
        ///         The value of <paramref name="tstep" /> is determined from information saved
        ///         with the hydraulic analysis that preceded the water quality analysis.
        ///         Treat it as a read-only variable.
        ///     </para>
        /// </remarks>
        /// <example>
        ///     <code>
        ///     int t, tstep;
        ///     ENsolveH(); /* Generate and save hydraulics */
        ///     ENopenQ();
        ///     ENinitQ(false);
        ///     
        ///     do {
        ///         ENrunQ(out t);
        ///         /* Monitor results at time t, which   */
        ///         /* begins a new hydraulic time period */
        ///         ENnextQ(out tstep);
        ///     } while (tstep > 0);
        /// 
        ///     ENcloseQ();              
        /// </code>
        /// </example>
        /// <seealso cref="ENopenQ" />
        /// <seealso cref="ENinitQ" />
        /// <seealso cref="ENrunQ" />
        /// <seealso cref="ENcloseQ" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENnextQ(out int tstep);

        /// <summary>
        ///     Advances the water quality simulation one water quality time step.
        ///     The time remaining in the overall simulation is returned
        ///     in <paramref name="tleft" />.
        /// </summary>
        /// <param name="tleft">seconds remaining in the overall simulation duration</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         This function is used in a <c>do...while</c> loop with <see cref="ENrunQ" />
        ///         to perform an extended period water quality simulation. It allows you to
        ///         access water quality results at each water quality time step of the simulation,
        ///         rather than at the start of each hydraulic period as with <see cref="ENnextQ" />.
        ///     </para>
        ///     <para>
        ///         Use the argument <paramref name="tleft" /> to determine when no more calls
        ///         to <see cref="ENrunQ" /> are needed because the end of the simulation period
        ///         has been reached (i.e., when <paramref name="tleft" /> = 0).
        ///     </para>
        ///     <para>
        ///         Treat <paramref name="tleft" /> as a read-only variable (do not assign it a value).
        ///     </para>
        /// </remarks>
        /// <example>
        ///     <code>
        ///     int t, tleft;
        ///     
        ///     ENsolveH(); /* Generate &amp; save hydraulics */
        ///     ENopenQ();
        ///     ENinitQ(false);
        ///     
        ///     do {
        ///         ENrunQ(out t);
        ///         /* Monitor results at time t */
        ///         ENstepQ(out tleft);
        ///     } while (tleft > 0);
        /// 
        ///     ENcloseQ(); 
        /// </code>
        /// </example>
        /// <seealso cref="ENopenQ" />
        /// <seealso cref="ENinitQ" />
        /// <seealso cref="ENrunQ" />
        /// <seealso cref="ENcloseQ" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENstepQ(out int tleft);

        /// <summary>Closes the water quality analysis system, freeing all allocated memory.</summary>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     Call <see cref="ENcloseQ" /> after all water quality analyses have been made
        ///     using the <see cref="ENinitQ" /> - <see cref="ENrunQ" /> - <see cref="ENnextQ" />
        ///     (or <see cref="ENstepQ" />) sequence of function calls. Do not call this
        ///     function if <see cref="ENsolveQ" /> is being used.
        /// </remarks>
        /// <seealso cref="ENopenQ" />
        /// <seealso cref="ENinitQ" />
        /// <seealso cref="ENrunQ" />
        /// <seealso cref="ENstepQ" />
        /// <seealso cref="ENnextQ" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENcloseQ();

        #endregion

        #region Functions for generating an output report

        /// <summary>Writes line of text to report file.</summary>
        /// <param name="line">text string</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, CharSet = CHARSET,
            BestFitMapping = false, ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENwriteline([MarshalAs(STRING)] string line);

        /// <summary>Writes a formatted text report on simulation results to the Report file</summary>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Either a full hydraulic analysis or full hydraulic and water quality analysis
        ///         must have been run, with results saved to file, before <see cref="ENreport" />
        ///         is called. In the former case, <see cref="ENsaveH" /> must also be called first
        ///         to transfer results from the Hydraulics file to the Output file.
        ///     </para>
        ///     <para>
        ///         The format of the report is controlled by commands placed in the [REPORT]
        ///         section of the EPANET input file or by similar commands issued with
        ///         the <see cref="ENsetreport" /> function.
        ///     </para>
        /// </remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENreport();

        /// <summary>Resets report options to default values.</summary>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Clears any report formatting commands that either appeared in
        ///         the <c>[REPORT]</c> section of the EPANET Input file or were issued
        ///         with the <see cref="ENsetreport" /> function.
        ///     </para>
        ///     <para>After calling this function the default reporting options are in effect.</para>
        ///     <para>
        ///         These are:
        ///         <list type="bullet">
        ///             <item>No status report</item>
        ///             <item>No energy report</item>
        ///             <item>No nodes reported on</item>
        ///             <item>No links reported on</item>
        ///             <item>Node variables reported to 2 decimal places</item>
        ///             <item>Link variables reported to 2 decimal places (3 for friction factor)</item>
        ///             <item>Node variables reported are elevation, head, pressure, and quality</item>
        ///             <item>Link variables reported are flow, velocity, and head loss</item>
        ///         </list>
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENreport" />
        /// <seealso cref="ENsetreport" />
        /// <seealso cref="ENsetstatusreport" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENresetreport();

        /// <summary>Processes a reporting format command.</summary>
        /// <param name="s">Report format command.</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Call <see cref="ENresetreport" /> to clear any previous report formatting
        ///         commands that either appeared in the Input file or were issued with calls
        ///         to <see cref="ENsetreport" /> or <see cref="ENsetstatusreport" />.
        ///     </para>
        ///     <para>
        ///         Formatted results of a simulation can be written to the Report file using
        ///         the <see cref="ENreport" /> function.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENreport" />
        /// <seealso cref="ENresetreport" />
        /// <seealso cref="ENsetstatusreport" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, CharSet = CHARSET,
            BestFitMapping = false, ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENsetreport([MarshalAs(STRING)] string s);

        #endregion

        #region Functions for retrieving network information

        /// <summary>
        ///     Retrieves a number assigned to the most recent
        ///     update of the source code. This number, set by the
        ///     constant <c>CODEVERSION</c> found in TYPES.H,  began with
        ///     20001 and increases by 1 with each new update.
        /// </summary>
        /// <param name="v">Version number of the source code.</param>
        /// <returns>EPANET error code <see cref="ErrorCode" /> (should always be 0).</returns>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetversion(out int v);

        /// <summary>
        ///     Retrieves the parameters of a simple control statement.
        ///     The index of the control is specified in cindex and the
        ///     remaining arguments return the control's parameters.
        /// </summary>
        /// <param name="cindex">
        ///     Control index (position of control statement in the input file, starting from 1).
        /// </param>
        /// <param name="ctype">Control type code <see cref="ControlType" />.</param>
        /// <param name="lindex">Index of controlled link.</param>
        /// <param name="setting">Control setting on link.</param>
        /// <param name="nindex">
        ///     Index of controlling node (0 for <see cref="ControlType.Timer" />
        ///     or <see cref="ControlType.TimeOfDay" /> control).
        /// </param>
        /// <param name="level">
        ///     Value of controlling water level or pressure for level controls
        ///     or of time of control action (in seconds) for time-based controls.
        /// </param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Controls are indexed starting from 1 in the order in which they were
        ///         entered into the [CONTROLS] section of the EPANET input file.
        ///     </para>
        ///     <para>
        ///         For pipes, a setting of 0 means the pipe is closed and 1 means it is open.
        ///         For a pump, the setting contains the pump's speed, with 0 meaning the pump
        ///         is closed and 1 meaning it is open at its normal speed. For a valve, the
        ///         setting refers to the valve's pressure, flow, or loss coefficient value,
        ///         depending on valve type
        ///     </para>
        ///     <para>
        ///         For Timer or Time-of-Day controls the nindex parameter equals 0.
        ///     </para>
        ///     <para>
        ///         See <see cref="ENsetcontrol" /> for an example of using this function.
        ///     </para>
        /// </remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetcontrol(
            int cindex,
            out ControlType ctype,
            out int lindex,
            out float setting,
            out int nindex,
            out float level);

        /// <summary>Retrieves the number of network components of a specified type.</summary>
        /// <param name="code">Component code <see cref="CountType" />.</param>
        /// <param name="count">Number of components in network.</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         The number of junctions in a network equals the number of nodes minus
        ///         the number of tanks and reservoirs.
        ///     </para>
        ///     <para>
        ///         There is no facility within the Toolkit to add to or delete from the
        ///         components described in the Input file.
        ///     </para>
        /// </remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetcount(CountType code, out int count);

        /// <summary>Gets value for an analysis option</summary>
        /// <param name="code">option code <see cref="MiscOption" /></param>
        /// <param name="value">option value</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetoption(MiscOption code, out float value);

        /// <summary>Retrieves value of specific time parameter.</summary>
        /// <param name="code">Time parameter code <see cref="TimeParameter" />.</param>
        /// <param name="value">value of time parameter</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgettimeparam(TimeParameter code, out int value);

        /// <summary>Retrieves flow units code</summary>
        /// <param name="code">code of flow units in use <see cref="FlowUnitsType" /></param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Flow units are specified in the [OPTIONS] section of the EPANET Input file.
        ///     </para>
        ///     <para>
        ///         Flow units in liters or cubic meters implies that metric units are used for
        ///         all other quantities in addition to flow. Otherwise US units are employed.
        ///     </para>
        /// </remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetflowunits(out FlowUnitsType code);

        /// <summary>Retrieves index of time pattern with specific ID.</summary>
        /// <param name="id">time pattern ID</param>
        /// <param name="index">index of time pattern in list of patterns</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>Pattern indexes are consecutive integers starting from 1.</remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, CharSet = CHARSET,
            BestFitMapping = false, ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENgetpatternindex([MarshalAs(STRING)] string id, out int index);

        /// <summary>Retrieves ID of a time pattern with specific index.</summary>
        /// <param name="index">index of time pattern</param>
        /// <param name="id">pattern ID</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para><paramref name="id" /> must be able to hold <see cref="MAXID" /> characters.</para>
        ///     <para>Pattern indexes are consecutive integers starting from 1.</para>
        /// </remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetpatternid(int index, [MarshalAs(STRING)] StringBuilder id);

        /// <summary>Retrieves the number of time periods in a specific time pattern.</summary>
        /// <param name="index">index of time pattern</param>
        /// <param name="len">pattern length (number of multipliers)</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>Pattern indexes are consecutive integers starting from 1.</remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetpatternlen(int index, out int len);

        /// <summary>Retrieves the multiplier factor for a specific time period in a time pattern.</summary>
        /// <param name="index">index of time pattern</param>
        /// <param name="period">pattern time period</param>
        /// <param name="value">pattern multiplier</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>Pattern indexes and periods are consecutive integers starting from 1.</remarks>
        /// <seealso cref="ENgetpatternindex" />
        /// <seealso cref="ENgetpatternlen" />
        /// <seealso cref="ENsetpatternvalue" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetpatternvalue(int index, int period, out float value);

        /// <summary>Retrieves type of quality analysis called for.</summary>
        /// <param name="qualcode">WQ analysis code number <see cref="QualType" /></param>
        /// <param name="tracenode">index of node being traced (if qualocode = WQ tracing)</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     The <paramref name="tracenode" /> value will be 0 when <paramref name="qualcode" />
        ///     is not <see cref="QualType.Trace" />.
        /// </remarks>
        /// <seealso cref="ENsetqualtype" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetqualtype(out QualType qualcode, out int tracenode);

        /// <summary>Retrieves text of error/warning message.</summary>
        /// <param name="err">Error/warning code number.</param>
        /// <param name="errmsg">Text of error/warning message.</param>
        /// <param name="n">Maximum length of string errmsg (should be <see cref="MAXMSG" /> characters).</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>Error message strings should be at least <see cref="MAXMSG" /> characters in length.</remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, BestFitMapping = false,
            ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENgeterror(ErrorCode err, [MarshalAs(STRING), Out] StringBuilder errmsg, int n);

        #endregion

        #region Functions for retrieving node data

        /// <summary>Retrieves index of a node with specific ID</summary>
        /// <param name="id">node ID</param>
        /// <param name="index">index of node in list of nodes</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>Node indexes are consecutive integers starting from 1.</remarks>
        /// <seealso cref="ENgetnodeid" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, CharSet = CHARSET,
            BestFitMapping = false, ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENgetnodeindex([MarshalAs(STRING)] string id, out int index);

        /// <summary>
        ///     Retrieves the ID label of a node with a specified index
        /// </summary>
        /// <param name="index">index of node in list of nodes</param>
        /// <param name="id">node ID</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para><paramref name="id" /> must be able to hold <see cref="MAXID" /> characters.</para>
        ///     <para>Node indexes are consecutive integers starting from 1.</para>
        /// </remarks>
        /// <seealso cref="ENgetnodeindex" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, BestFitMapping = false,
            ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENgetnodeid(int index, [MarshalAs(STRING), Out] StringBuilder id);

        /// <summary>
        ///     Retrieves node type of specific node
        /// </summary>
        /// <param name="index">node index</param>
        /// <param name="code">node type code number <see cref="NodeType" /></param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>Node indexes are consecutive integers starting from 1.</remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetnodetype(int index, out NodeType code);

        /// <summary>
        ///     Retrieves parameter value for a node
        /// </summary>
        /// <param name="index">node index</param>
        /// <param name="code">node parameter code <see cref="NodeValue" /></param>
        /// <param name="value">value of node's parameter</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Node indexes are consecutive integers starting from 1.
        ///     </para>
        ///     <para>
        ///         Values are returned in units which depend on the units used for
        ///         flow rate in the EPANET input file.
        ///     </para>
        /// </remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetnodevalue(int index, NodeValue code, out float value);

        #endregion

        #region Functions for retrieving link data

        /// <summary>
        ///     Retrieves index of a link with specific ID
        /// </summary>
        /// <param name="id">link ID</param>
        /// <param name="index">index of link in list of links</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>Link indexes are consecutive integers starting from 1.</remarks>
        /// <seealso cref="ENgetlinkid" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, CharSet = CHARSET,
            BestFitMapping = false, ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENgetlinkindex([MarshalAs(STRING)] string id, out int index);

        /// <summary>Retrieves ID of a link with specific index.</summary>
        /// <param name="index">Index of link in list of links.</param>
        /// <param name="id">Link ID</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para><paramref name="id" /> must be able to hold <see cref="MAXID" /> characters.</para>
        ///     <para>Link indexes are consecutive integers starting from 1.</para>
        /// </remarks>
        /// <seealso cref="ENgetlinkindex" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, BestFitMapping = false,
            ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENgetlinkid(int index, [MarshalAs(STRING), Out] StringBuilder id);

        /// <summary>Retrieves link type of specific link.</summary>
        /// <param name="index">Link index.</param>
        /// <param name="code">Link type code number <see cref="LinkType" /></param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>Link indexes are consecutive integers starting from 1.</remarks>
        /// <seealso cref="ENgetlinkindex" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetlinktype(int index, out LinkType code);

        /// <summary>
        ///     Retrieves the indexes of the end nodes of a specified link.
        /// </summary>
        /// <param name="index">link index</param>
        /// <param name="fnode">index of link's starting node</param>
        /// <param name="tnode">index of link's ending node</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>Node and link indexes are consecutive integers starting from 1.</para>
        ///     <para>
        ///         The From and To nodes are as defined for the link in the EPANET input
        ///         file. The actual direction of flow in the link is not considered.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENgetlinkindex" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetlinknodes(int index, out int fnode, out int tnode);

        /// <summary>
        ///     Retrieves parameter value for a link
        /// </summary>
        /// <param name="index">link index</param>
        /// <param name="code">link parameter code <see cref="LinkValue" /></param>
        /// <param name="value">value of link's parameter</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>Link indexes are consecutive integers starting from 1.</para>
        ///     <para>
        ///         Flow rate is positive if the direction of flow is from the designated
        ///         start node of the link to its designated end node, and negative otherwise.
        ///     </para>
        ///     <para>
        ///         Values are returned in units which depend on the units used for flow rate
        ///         in the EPANET input file.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENgetlinkindex" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENgetlinkvalue(int index, LinkValue code, out float value);

        #endregion

        #region Functions for changing network data

        /// <summary>Specifies parameters that define a simple control</summary>
        /// <param name="cindex">
        ///     control index (position of control statement in the input file, starting from 1)
        /// </param>
        /// <param name="ctype">control type code <see cref="ControlType" /></param>
        /// <param name="lindex">index of controlled link</param>
        /// <param name="setting">control setting applied to link</param>
        /// <param name="nindex">
        ///     index of controlling node (0 for <see cref="ControlType.Timer" />
        ///     or <see cref="ControlType.TimeOfDay" /> control)
        /// </param>
        /// <param name="level">
        ///     value of controlling water level or pressure for level controls
        ///     or of time of control action (in seconds) for time-based controls
        /// </param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Controls are indexed starting from 1 in the order in which they were entered
        ///         into the [CONTROLS] section of the EPANET input file.
        ///     </para>
        ///     <para>
        ///         For pipes, a setting of 0 means the pipe is closed and 1 means it is open.
        ///         For a pump, the setting contains the pump's speed, with 0 meaning the pump
        ///         is closed and 1 meaning it is open at its normal speed. For a valve, the
        ///         setting refers to the valve's pressure, flow, or loss coefficient, depending
        ///         on valve type.
        ///     </para>
        ///     <para>
        ///         For Timer or Time-of-Day controls set the <paramref name="nindex" /> parameter to 0.
        ///     </para>
        ///     <para>
        ///         For level controls, if the controlling node <paramref name="nindex" /> is a tank
        ///         then the level parameter should be a water level above the tank bottom (not an
        ///         elevation). Otherwise level should be a junction pressure.
        ///     </para>
        ///     <para>
        ///         To remove a control on a particular link, set the <paramref name="lindex" /> parameter
        ///         to 0. Values for the other parameters in the function will be ignored.
        ///     </para>
        /// </remarks>
        /// <example>
        ///     This example uses <see cref="ENgetcontrol" /> and <see cref="ENsetcontrol" />
        ///     to change the low level setting on the node that controls a link with
        ///     index <c>thelink</c> to a new value <c>newlevel</c>.
        ///     <code>
        ///     int numctrls, lindex, nindex, thelink = 1;
        ///     float setting, level, newlevel = 1f;
        ///     ControlType ctype;
        /// 
        ///     ENgetcount(CountType.Control, out numctrls);
        /// 
        ///     for (int i = 1; i &lt;= numctrls; i++) {
        ///         ENgetcontrol(i, out ctype, out lindex, out setting, out nindex, out level);
        ///         if (ctype == ControlType.Lowlevel &amp;&amp; lindex == thelink) {
        ///             ENsetcontrol(i, ctype, lindex, setting, nindex, newlevel);
        ///             break;
        ///         }
        ///     }
        /// </code>
        /// </example>
        /// <seealso cref="ENgetcontrol" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENsetcontrol(
            int cindex,
            ControlType ctype,
            int lindex,
            float setting,
            int nindex,
            float level);

        /// <summary>
        ///     Sets the value of a parameter for a specific node
        /// </summary>
        /// <param name="index">node index</param>
        /// <param name="code">node parameter code <see cref="NodeValue" /></param>
        /// <param name="v">parameter value</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>Node indexes are consecutive integers starting from 1.</para>
        ///     <para>
        ///         Values are supplied in units which depend on the units
        ///         used for flow rate in the EPANET input file.
        ///     </para>
        /// </remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENsetnodevalue(int index, NodeValue code, float v);

        /// <summary>
        ///     Sets input parameter value for a link
        /// </summary>
        /// <param name="index">link index</param>
        /// <param name="code">link parameter code <see cref="LinkValue" /></param>
        /// <param name="v">parameter value</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>Link indexes are consecutive integers starting from 1.</para>
        ///     <para>
        ///         Values are supplied in units which depend on the units used for flow rate
        ///         in the EPANET input file.
        ///     </para>
        ///     <para>
        ///         Use <see cref="LinkValue.InitStatus" /> and <see cref="LinkValue.InitSetting" />
        ///         to set the design value for a link's status or setting that exists prior to the
        ///         start of a simulation. Use <see cref="LinkValue.Status" /> and
        ///         <see cref="LinkValue.Setting" /> to change these values while a simulation
        ///         is being run (within the <see cref="ENrunH" /> - <see cref="ENnextH" /> loop).
        ///     </para>
        ///     <para>
        ///         If a control valve has its status explicitly set to <see cref="LinkStatus.Open" />
        ///         or <see cref="LinkStatus.Closed" />, then to make it active again during a simulation
        ///         you must provide a new valve setting value using the <see cref="LinkValue.Setting" />
        ///         parameter.
        ///     </para>
        ///     <para>
        ///         For pipes, either <see cref="LinkValue.Roughness" />
        ///         or <see cref="LinkValue.InitSetting" /> can be used to change roughness.
        ///     </para>
        /// </remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENsetlinkvalue(int index, LinkValue code, float v);

        /// <summary>
        ///     Adds a new time pattern appended to the end of the existing patterns.
        /// </summary>
        /// <param name="id">ID name of the new pattern</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>The ID label should contain no more than 31 characters.</para>
        ///     <para>The new pattern will contain a single time period whose multiplier factor is 1.</para>
        ///     <para>
        ///         Use the <see cref="ENsetpattern" /> function to populate the pattern with a
        ///         specific set of multipliers after first retrieving its index with the
        ///         <see cref="ENgetpatternindex" /> function.
        ///     </para>
        /// </remarks>
        /// <example>
        ///     <code>
        ///     string  patId = "NewPattern";  
        ///     float[] patFactors = new[] {0.8f, 1.1f, 1.4f, 1.1f, 0.8f, 0.7f};  
        ///     int   patIndex;  
        ///     ENaddpattern(patId);  
        ///     ENgetpatternindex(patId, out patIndex);  
        ///     ENsetpattern(patIndex, patFactors, 6); 
        /// </code>
        /// </example>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, CharSet = CHARSET,
            BestFitMapping = false, ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENaddpattern([MarshalAs(STRING)] string id);

        /// <summary>
        ///     Sets all of the multiplier factors for a specific time pattern
        /// </summary>
        /// <param name="index">time pattern index</param>
        /// <param name="f">array of pattern multipliers</param>
        /// <param name="n">number of time periods in pattern</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>Pattern indexes are consecutive integers starting from 1.</para>
        ///     <para>
        ///         <paramref name="f" /> points to a zero-based array that
        ///         contains nfactors elements.
        ///     </para>
        ///     <para>
        ///         Use this function to redefine (and resize) a time pattern all at once;
        ///         use <see cref="ENsetpatternvalue" /> to revise pattern factors in
        ///         specific time periods of a pattern.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENgetpatternindex" />
        /// <seealso cref="ENgetpatternlen" />
        /// <seealso cref="ENgetpatternvalue" />
        /// <seealso cref="ENsetpatternvalue" />
        /// <seealso cref="ENaddpattern" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENsetpattern(
            int index,
            [MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.R4, SizeParamIndex = 2), In] float[] f,
            int n);

        /// <summary>
        ///     Sets multiplier for a specific time period and pattern
        /// </summary>
        /// <param name="index">time pattern index</param>
        /// <param name="period">time pattern period</param>
        /// <param name="value">pattern multiplier</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>Pattern indexes are consecutive integers starting from 1.</para>
        ///     <para>
        ///         Use <see cref="ENsetpattern" /> to reset all of the factors in a time pattern.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENgetpatternindex" />
        /// <seealso cref="ENgetpatternlen" />
        /// <seealso cref="ENgetpatternvalue" />
        /// <seealso cref="ENsetpattern" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENsetpatternvalue(int index, int period, float value);

        /// <summary>Sets value for time parameter.</summary>
        /// <param name="code">Time parameter code <see cref="TimeParameter" />.</param>
        /// <param name="value">Value of time parameter in seconds.</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     Do not change time parameters after calling <see cref="ENinitH" /> in a
        ///     hydraulic analysis or <see cref="ENinitQ" /> in a water quality analysis.
        /// </remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENsettimeparam(TimeParameter code, int value);

        /// <summary>Sets value for an analysis option</summary>
        /// <param name="code">option code <see cref="MiscOption" /></param>
        /// <param name="v">option value</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENsetoption(MiscOption code, float v);

        /// <summary>Sets level of hydraulic status reporting</summary>
        /// <param name="statuslevel">status reporting code <see cref="StatusLevel" /></param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Status reporting writes changes in the hydraulics status of network
        ///         elements to the Report file as a hydraulic simulation unfolds.
        ///         There are three levels of reporting <see cref="StatusLevel" />:
        ///         <list type="number">
        ///             <item>None</item>
        ///             <item>Normal</item>
        ///             <item>Full</item>
        ///         </list>
        ///     </para>
        ///     <para>
        ///         The full status report contains information on the convergence of each
        ///         trial of the solution to the system hydraulic equations at each time
        ///         step of a simulation. It is useful mainly for debugging purposes.
        ///     </para>
        ///     <para>
        ///         If many hydraulic analyses will be run in the application
        ///         it is recommended that status reporting be turned off
        ///         (<paramref name="statuslevel" /> = <see cref="StatusLevel.None" />).
        ///     </para>
        /// </remarks>
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true)]
        public static extern ErrorCode ENsetstatusreport(StatusLevel statuslevel);

        /// <summary>Sets type of quality analysis called for</summary>
        /// <param name="qualcode">water quality analysis code <see cref="QualType" /></param>
        /// <param name="chemname">name of the chemical being analyzed</param>
        /// <param name="chemunits">units that the chemical is measured in</param>
        /// <param name="tracenode">ID of node traced in a source tracing analysis</param>
        /// <returns>EPANET error code <see cref="ErrorCode" />.</returns>
        /// <remarks>
        ///     <para>
        ///         Chemical name and units can be an empty string if the analysis is not for a chemical.
        ///         The same holds for the trace node if the analysis is not for source tracing.
        ///     </para>
        ///     <para>
        ///         Note that the trace node is specified by ID and not by index.
        ///     </para>
        /// </remarks>
        /// <seealso cref="ENgetqualtype" />
        [DllImport(EPANETDLL, CallingConvention = CONVENTION, ExactSpelling = true, CharSet = CHARSET,
            BestFitMapping = false, ThrowOnUnmappableChar = true)]
        public static extern ErrorCode ENsetqualtype(
            QualType qualcode,
            [MarshalAs(STRING), Optional, DefaultParameterValue("")] string chemname,
            [MarshalAs(STRING), Optional, DefaultParameterValue("")] string chemunits,
            [MarshalAs(STRING), Optional, DefaultParameterValue("")] string tracenode);

        #endregion

        // Following values may need to be changed for custom epanet builds.

        /// <summary>Name of epanet dll file ("epanet2.dll").</summary>
        private const string EPANETDLL = "epanet2.dll";
        //private const string EPANETDLL = "Epanet.dll";

        /// <summary>Epanet dll calling convention.</summary>
        private const CallingConvention CONVENTION = CallingConvention.StdCall;

        /// <summary>String charset of epanet dll methods.</summary>
        private const CharSet CHARSET = CharSet.Ansi;

        /// <summary>String type of epanet dll.</summary>
        private const UnmanagedType STRING = UnmanagedType.LPStr;

        // private const int MAXFNAME = 259;

        /// <summary>Maximum number of characters in epanet dll id strings (Node.Id, Link.Id etc.).</summary>
        public const int MAXID = 31;

        /// <summary>Maximum number of characters in epanet dll error strings, lines in *.inp file.</summary>
        public const int MAXMSG = 79;
    }

}
